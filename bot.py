import os
import logging
import sys
from telebot import TeleBot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv
from video_parser import get_video_info, extract_video_id
from youtube_parser import get_playlist_info, extract_playlist_id
from post_generator import generate_post_text, extract_title_and_subtitle, generate_cover
from io import BytesIO

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("bot_errors.log", mode="a", encoding="utf-8"),
        logging.StreamHandler(sys.stdout)
    ]
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TG_TOKEN = os.getenv("TG_TOKEN")
if not TG_TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")

bot = TeleBot(TG_TOKEN)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

@bot.message_handler(commands=['start'])
def send_welcome(message):
    logging.info("–ö–æ–º–∞–Ω–¥–∞ /start –ø–æ–ª—É—á–µ–Ω–∞")
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –ø–ª–µ–π–ª–∏—Å—Ç –∏–ª–∏ –≤–∏–¥–µ–æ, –∏ —è –ø—Ä–∏—à–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –æ–±–ª–æ–∂–∫—É.")

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    chat_id = message.chat.id
    if user_states.get(chat_id, {}).get('state') == 'waiting_for_title':
        handle_new_title(message)
        return

    url = message.text.strip()
    logging.debug(f"–ü–æ–ª—É—á–µ–Ω–∞ —Å—Å—ã–ª–∫–∞: {url}")

    try:
        data = None
        course_info = None
        poster_url = None
        year_text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        duration_text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—Å—ã–ª–∫–∏
        playlist_id = extract_playlist_id(url)
        video_id = extract_video_id(url)
        
        if playlist_id:
            logging.debug("–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–ª–µ–π–ª–∏—Å—Ç, –ø–∞—Ä—Å–∏–º...")
            data = get_playlist_info(url)
            if not data:
                raise ValueError("get_playlist_info –≤–µ—Ä–Ω—É–ª None")
            clean_link = f"https://www.youtube.com/playlist?list={playlist_id}"
            course_info = f"üìº –ù–∞–∑–≤–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞: {data['title']}\n"
            if data['course_year']:
                course_info += f"üìÖ –ì–æ–¥ –∫—É—Ä—Å–∞: {data['course_year']}\n"
            course_info += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data['description'] or '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
            course_info += f"‚è≥ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫—É—Ä—Å–∞: {data['total_hours']} —á–∞—Å–æ–≤\n"
            course_info += f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –∫—É—Ä—Å: {clean_link}\n"
            course_info += f"üé¨ –í—Å–µ–≥–æ –≤–∏–¥–µ–æ: {len(data['videos'])}\n"
            for idx, video in enumerate(data['videos'], 1):
                course_info += f"\n{idx}. {video['title']}\n"
                course_info += f"   üìÖ –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {video['published'].strftime('%Y-%m-%d')}\n"
                course_info += f"   ‚è± –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {video['duration'] // 60} –º–∏–Ω"
            poster_url = data['cover_url']
            year_text = str(data['course_year']) if data['course_year'] else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            duration_text = f"{data['total_hours']} —á–∞—Å–æ–≤"

        elif video_id:
            logging.debug("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≤–∏–¥–µ–æ, –ø–∞—Ä—Å–∏–º...")
            data = get_video_info(url)
            if not data:
                raise ValueError("get_video_info –≤–µ—Ä–Ω—É–ª None")
            clean_link = f"https://youtu.be/{video_id}"
            course_info = f"üìº –ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞: {data['title']}\n"
            course_info += f"üìÖ –ì–æ–¥ –∫—É—Ä—Å–∞: {data['course_year']}\n"
            course_info += f"‚è≥ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫—É—Ä—Å–∞: {data['total_hours']} —á–∞—Å–æ–≤\n"
            course_info += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data['description'] or '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
            course_info += f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –∫—É—Ä—Å: {clean_link}"
            poster_url = data['cover_url']
            year_text = str(data['course_year'])
            duration_text = f"{data['total_hours']} —á–∞—Å–æ–≤"
        else:
            logging.warning("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏.")
            bot.send_message(chat_id, "‚õî –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏")
            return

        if not all([data, poster_url, course_info]):
            raise ValueError("–û–¥–Ω–æ –∏–∑ –∫–ª—é—á–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –∏ –æ–±–ª–æ–∂–∫–∏
        post_text = generate_post_text(course_info)
        title_text, subtitle_text = extract_title_and_subtitle(post_text)
        cover_image = generate_cover(poster_url, title_text, year_text, duration_text, subtitle_text)

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±–∞–π—Ç—ã
        cover_image_bytes = BytesIO()
        cover_image.seek(0)
        cover_image_bytes.write(cover_image.getvalue())
        cover_image_bytes.seek(0)

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –≤ HTML
        post_text_html = post_text.replace('**', '<b>').replace('__', '<i>')

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ —Å –æ–±–ª–æ–∂–∫–æ–π
        bot.send_photo(
            chat_id,
            cover_image_bytes,
            caption=post_text_html,
            parse_mode='HTML'
        )

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        user_states[chat_id] = {
            'data': data,
            'course_info': course_info,
            'poster_url': poster_url,
            'year_text': year_text,
            'duration_text': duration_text,
            'post_text': post_text,
            'cover_image': cover_image_bytes.getvalue()
        }

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        markup = InlineKeyboardMarkup()
        markup.row_width = 2
        markup.add(
            InlineKeyboardButton("–í—Å—ë –æ–∫–µ–π", callback_data="approve"),
            InlineKeyboardButton("–ü–æ–º–µ–Ω—è—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫", callback_data="change_title")
        )
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}", exc_info=True)
        bot.send_message(chat_id, f"‚õî –û—à–∏–±–∫–∞: {str(e)}")

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    chat_id = call.message.chat.id
    if call.data == "approve":
        bot.answer_callback_query(call.id, "–ü–æ—Å—Ç –æ–¥–æ–±—Ä–µ–Ω!")
        if chat_id in user_states:
            del user_states[chat_id]
    elif call.data == "change_title":
        bot.answer_callback_query(call.id)
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–¥–≤–µ —Å—Ç—Ä–æ—á–∫–∏):")
        user_states[chat_id]['state'] = 'waiting_for_title'

def handle_new_title(message):
    chat_id = message.chat.id
    new_title = message.text.strip()
    if chat_id not in user_states:
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return

    title_lines = new_title.split('\n')
    if len(title_lines) != 2:
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –¥–≤–µ —Å—Ç—Ä–æ—á–∫–∏.")
        return

    title_text = title_lines[0].strip()
    subtitle_text = title_lines[1].strip()

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    poster_url = user_states[chat_id]['poster_url']
    year_text = user_states[chat_id]['year_text']
    duration_text = user_states[chat_id]['duration_text']
    post_text = user_states[chat_id]['post_text']

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
    lines = post_text.split('\n')
    if lines:
        lines[0] = f"<b>{title_text}</b>"
        if len(lines) > 1:
            lines[1] = subtitle_text
        else:
            lines.append(subtitle_text)
        updated_post_text = '\n'.join(lines)
    else:
        updated_post_text = f"<b>{title_text}</b>\n{subtitle_text}"

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π –æ–±–ª–æ–∂–∫–∏
    new_cover_image = generate_cover(poster_url, title_text, year_text, duration_text, subtitle_text)
    new_cover_image_bytes = BytesIO()
    new_cover_image.seek(0)
    new_cover_image_bytes.write(new_cover_image.getvalue())
    new_cover_image_bytes.seek(0)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
    bot.send_photo(
        chat_id,
        new_cover_image_bytes,
        caption=updated_post_text,
        parse_mode='HTML'
    )

    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    del user_states[chat_id]

if __name__ == "__main__":
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    bot.polling(none_stop=True)