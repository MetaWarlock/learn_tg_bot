import os
import re
import logging
import sys
from telebot import TeleBot
from dotenv import load_dotenv
from video_parser import get_video_info, extract_video_id
from youtube_parser import get_playlist_info, extract_playlist_id
from post_image import make_cover
from chatgpt import generate_post
from io import BytesIO

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –∏ –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª bot_errors.log
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("bot_errors.log", mode="a", encoding="utf-8"),
        logging.StreamHandler(sys.stdout)
    ]
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TG_TOKEN = os.getenv("TG_TOKEN")
if not TG_TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")

bot = TeleBot(TG_TOKEN)

@bot.message_handler(commands=['start'])
def send_welcome(message):
    logging.info("–ö–æ–º–∞–Ω–¥–∞ /start –ø–æ–ª—É—á–µ–Ω–∞")
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –ø–ª–µ–π–ª–∏—Å—Ç –∏–ª–∏ –≤–∏–¥–µ–æ, –∏ —è –ø—Ä–∏—à–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –æ–±–ª–æ–∂–∫—É.")

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    url = message.text.strip()
    logging.debug(f"–ü–æ–ª—É—á–µ–Ω–∞ —Å—Å—ã–ª–∫–∞: {url}")

    try:
        data = None
        course_info = None
        poster_url = None
        year_text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        duration_text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ID
        playlist_id = extract_playlist_id(url)
        video_id = extract_video_id(url)
        
        if playlist_id:
            logging.debug("–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–ª–µ–π–ª–∏—Å—Ç, –ø–∞—Ä—Å–∏–º...")
            data = get_playlist_info(url)
            if not data:
                raise ValueError("get_playlist_info –≤–µ—Ä–Ω—É–ª None")
            clean_link = f"https://www.youtube.com/playlist?list={playlist_id}"
            course_info = f"üìº –ù–∞–∑–≤–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞: {data['title']}\n"
            if data['course_year']:
                course_info += f"üìÖ –ì–æ–¥ –∫—É—Ä—Å–∞: {data['course_year']}\n"
            course_info += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data['description'] or '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
            course_info += f"‚è≥ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫—É—Ä—Å–∞: {data['total_hours']} —á–∞—Å–æ–≤\n"
            course_info += f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –∫—É—Ä—Å: {clean_link}\n"
            course_info += f"üé¨ –í—Å–µ–≥–æ –≤–∏–¥–µ–æ: {len(data['videos'])}\n"
            for idx, video in enumerate(data['videos'], 1):
                course_info += f"\n{idx}. {video['title']}\n"
                course_info += f"   üìÖ –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {video['published'].strftime('%Y-%m-%d')}\n"
                course_info += f"   ‚è± –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {video['duration'] // 60} –º–∏–Ω"
            poster_url = data['cover_url']
            year_text = str(data['course_year']) if data['course_year'] else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            duration_text = f"{data['total_hours']} —á–∞—Å–æ–≤"

        elif video_id:
            logging.debug("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≤–∏–¥–µ–æ, –ø–∞—Ä—Å–∏–º...")
            data = get_video_info(url)
            if not data:
                raise ValueError("get_video_info –≤–µ—Ä–Ω—É–ª None")
            clean_link = f"https://youtu.be/{video_id}"
            course_info = f"üìº –ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞: {data['title']}\n"
            course_info += f"üìÖ –ì–æ–¥ –∫—É—Ä—Å–∞: {data['course_year']}\n"
            course_info += f"‚è≥ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫—É—Ä—Å–∞: {data['total_hours']} —á–∞—Å–æ–≤\n"
            course_info += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data['description'] or '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
            course_info += f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –∫—É—Ä—Å: {clean_link}"
            poster_url = data['cover_url']
            year_text = str(data['course_year'])
            duration_text = f"{data['total_hours']} —á–∞—Å–æ–≤"
        else:
            logging.warning("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
            bot.send_message(message.chat.id, "‚õî –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not all([data, poster_url, course_info]):
            raise ValueError("–û–¥–Ω–æ –∏–∑ –∫–ª—é—á–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ ChatGPT
        logging.debug("–í—ã–∑—ã–≤–∞–µ–º generate_post...")
        post_text = generate_post(course_info)
        if not post_text:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç –æ—Ç ChatGPT (post_text == None)")
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Ç—Ä–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
        post_text = post_text.replace("```", "")

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞
        lines = post_text.split('\n')
        title_text = None
        subtitle_text = None

        # –®–∞–±–ª–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–µ–∫—Å—Ç–∞ –º–µ–∂–¥—É <b>...</b>
        title_pattern = re.compile(r'<b>(.*?)</b>', re.IGNORECASE)

        for i, line in enumerate(lines):
            match = title_pattern.search(line)
            if match:
                # –í group(1) –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å—Å—è –≤—Å—ë, —á—Ç–æ –º–µ–∂–¥—É <b> –∏ </b>
                title_text = match.group(1).strip()
                # –ü–æ–ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                if i + 1 < len(lines):
                    next_line = lines[i+1].strip()
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —ç–º–æ–¥–∑–∏ –∏–ª–∏ —Ç–µ–≥–æ–≤
                    if next_line and not next_line.startswith(('üóì', '‚è∞', 'üîπ', '‚ô¶Ô∏è', '<a')):
                        subtitle_text = next_line
                break

        logging.debug(f"–ò—Ç–æ–≥–æ–≤—ã–µ title_text='{title_text}' subtitle_text='{subtitle_text}'")

        # –ï—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª–∏–Ω–Ω–µ–µ 30 —Å–∏–º–≤–æ–ª–æ–≤, –æ–±—Ä–µ–∑–∞–µ–º –µ–≥–æ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
        if title_text and len(title_text) > 30:
            words = title_text.split()
            title_text = " ".join(words[:3])
            subtitle_text = " ".join(words[3:]) if not subtitle_text else subtitle_text
            logging.debug(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±—Ä–µ–∑–∞–Ω: title_text='{title_text}', subtitle_text='{subtitle_text}'")

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±–ª–æ–∂–∫–∏
        logging.debug("–°–æ–∑–¥–∞—ë–º –æ–±–ª–æ–∂–∫—É...")
        cover_image = make_cover(
            poster_url,
            title_text or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
            year_text,
            duration_text,
            subtitle_text
        )
        if not cover_image:
            raise ValueError("make_cover –≤–µ—Ä–Ω—É–ª–∞ None –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±–ª–æ–∂–∫–∏.")

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±–∞–π—Ç—ã
        cover_image_bytes = BytesIO()
        cover_image.seek(0)
        cover_image_bytes.write(cover_image.getvalue())
        cover_image_bytes.seek(0)

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –∏–∑ Markdown –≤ HTML: —É–±–∏—Ä–∞–µ–º –∑–∞–º–µ–Ω—É —ç–º–æ–¥–∑–∏, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∏—Ö –æ—Ä–∏–≥–∏–Ω–∞–ª
        post_text_html = post_text.replace('**', '<b>').replace('__', '<i>')
        logging.debug("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é...")
        bot.send_photo(
            message.chat.id,
            cover_image_bytes,
            caption=post_text_html,
            parse_mode='HTML'
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
        bot.send_message(message.chat.id, f"‚õî –û—à–∏–±–∫–∞: {str(e)}")

if __name__ == "__main__":
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    bot.polling(none_stop=True)
